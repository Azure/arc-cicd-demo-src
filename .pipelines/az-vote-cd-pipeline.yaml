# Pipeline definition for CD after the CI pipeline runs.
trigger: none

resources:
  pipelines:
    - pipeline: az-vote-ci
      source: "arc-cicd-demo-src CI"
      trigger:
        branches:
          include: 
          - master
  repositories:
    - repository: Manifest
      type: git
      name: arc-cicd-demo-gitops

name: $(Date:yyyyMMdd)$(Rev:.r)

variables:
  - group: az-vote-app-dev
  - name: images_artifact_path
    value: $(Pipeline.Workspace)/az-vote-ci/image_tags
  - name: manifests_artifact_path
    value: $(Pipeline.Workspace)/az-vote-ci/manifests
  - name: utils_artifact_path
    value: $(Pipeline.Workspace)/az-vote-ci/utils

pool:
  vmImage: ubuntu-latest

stages:
  - stage: "deploy_dev"
    displayName: "Deploy to Dev"
    jobs:
      - deployment: Deploy_to_dev
        displayName: "Deploy to Dev"
        environment: dev
        strategy:
          runOnce:
            deploy:
              steps:
                - template: deployment-template.yaml
    
      - job: deploy_with_gitops
        dependsOn: Deploy_to_dev
        displayName: Wait for changes to be applied
        pool: server          
        variables:
          pr_num: $[ dependencies.Deploy_to_dev.outputs['Deploy_to_dev.Create_PR.PR_NUM'] ]
        condition: ne(variables['pr_num'],'')
        steps:   
        - template: pr-completion-task-template.yaml                 

      - job: "Automated_testing"
        displayName: Automated testing 
        dependsOn: deploy_with_gitops
        steps:
        - template: post-deployment-test-template.yaml


  - stage: "deploy_stage"
    displayName: "Deploy to Stage"
    variables:
      - group: az-vote-app-stage
    jobs:
      - deployment: Deploy_to_stage
        displayName: "Deploy to Stage"
        environment: stage
        strategy:
          runOnce:
            deploy:
              steps:
                - template: deployment-template.yaml

      - job: deploy_with_gitops
        dependsOn: Deploy_to_stage
        displayName: Wait for changes to be applied
        pool: server          
        variables:
          pr_num: $[ dependencies.Deploy_to_stage.outputs['Deploy_to_stage.Create_PR.PR_NUM'] ]
        condition: ne(variables['pr_num'],'')        
        steps:   
        - template: pr-completion-task-template.yaml  
      
      - job: "Automated_testing"
        displayName: Automated testing 
        dependsOn: deploy_with_gitops
        steps:
        - template: post-deployment-test-template.yaml

      # A sample demonstrating a rollback of the latest change if automated testing fails
      # It issues a reverting PR to the manifests repo. 
      # Once the reverting PR is merged, Flux will reconcile it to the cluster
      - job: rollback_deployment      
        dependsOn: [Automated_testing, Deploy_to_stage]
        condition: failed('Automated_testing')
        displayName: Rollback Deployment      
        variables:
          pr_num: $[ dependencies.Deploy_to_stage.outputs['Deploy_to_stage.Create_PR.PR_NUM'] ]
        steps:   
        - template: rollback-pr-revert-template.yaml                        

